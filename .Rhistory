stat_function(fun=dnorm, lwd = 1, col = 'red', args = list(mean = mean(not_defaulted$CURRENT_HOUSE_YRS, na.rm = TRUE), sd = sd(not_defaulted$CURRENT_HOUSE_YRS, na.rm = TRUE))) +
labs(title="Non-defaulted Customers years in Current Home Histogram") +
labs(x='Years in Current Home', y="Frequency")
# ggplot(not_defaulted, aes(y=CURRENT_HOUSE_YRS)) +
#   geom_boxplot() +
#   geom_boxplot( colour="orange", fill="#7777cc", outlier.colour="red", outlier.shape=8, outlier.size=4) +
#   labs(title="Not_Defaulted Customer Years in Current Home boxplot ",x="", y = "weight (lbs)")
qqnorm(not_defaulted$CURRENT_HOUSE_YRS, main="Q-Q plot of Years in Current Home of Not Defaulted Customers", col = 'seagreen3')
qqline(not_defaulted$CURRENT_HOUSE_YRS, col = 'red')
qqnorm(not_defaulted$Experience, main="Q-Q plot of Job Experience of Not Defaulted Customers", col = 'seagreen3')
#str(loandata)
ggplot(data=not_defaulted, aes(Experience)) +
geom_histogram(aes(y=..density..), binwidth = 4,
col="gold4",
fill="gold2",
alpha = .7) +
stat_function(fun=dnorm, lwd = 1, col = 'red', args = list(mean = mean(not_defaulted$Experience), sd = sd(not_defaulted$Experience))) +
labs(title="Non-defaulted Experience Histogram") +
labs(x="Experience", y="Frequency")
# ggplot(not_defaulted, aes(y=Experience)) +
#   geom_boxplot() +
#   geom_boxplot( colour="orange", fill="#7777cc", outlier.colour="red", outlier.shape=8, outlier.size=4) +
#   labs(title="Not_Defaulted Customer Experience boxplot ",x="", y = "weight (lbs)")
qqnorm(not_defaulted$Experience, main="Q-Q plot of Job Experience of Not Defaulted Customers", col = 'seagreen3')
qqline(not_defaulted$Experience, col = 'red')
knitr::opts_chunk$set(echo = TRUE)
ggplot(data=not_defaulted, aes(CURRENT_JOB_YRS)) +
geom_histogram(aes(y=..density..), binwidth = 1,
col="burlywood4",
fill="burlywood2",
alpha = .7) +
labs(title="Non-defaulted Years in Current Job Histogram") +
stat_function(fun=dnorm, lwd = 1, col = 'red', args = list(mean = mean(not_defaulted$CURRENT_JOB_YRS, na.rm = TRUE), sd = sd(not_defaulted$CURRENT_JOB_YRS, na.rm = TRUE))) +
labs(x="Years in Current Job", y="Frequency")
$\$$`r round(min(loanpredict$Income)*0.013, digits=2)`
`r round(min(loanpredict$Income)*0.013, digits=2)`
r round(min(loanpredict$Income)*0.013, digits=2)
r round(max(loanpredict$Income)*0.013, digits=2)
round(max(loanpredict$Income)*0.013, digits=2)
r format(ttest2sample_experience$p.value, scientific=TRUE, digits = 3)
format(ttest2sample_experience$p.value, scientific=TRUE, digits = 3)
ttest2sample_experience <- t.test(defaulted$Experience, not_defaulted$Experience, alternative = "two.sided")
#Output results
ttest2sample_experience
format(ttest2sample_experience$p.value, scientific=TRUE, digits = 3)
contable_marital = table(loandata$Married.Single, loandata$Risk_Flag)
xkabledply(contable_marital, title = 'Contigency table for Risk Flag vs Marital Status ')
#contigeny table
contable_housing = table(loandata$House_Ownership, loandata$Risk_Flag)
xkabledply(contable_housing, title = 'Contigency table for Risk Flag vs House Ownership ')
chisq.test(contable_housing)
contable_marital = table(loandata$Married.Single, loandata$Risk_Flag)
xkabledply(contable_marital, title = 'Contigency table for Risk Flag vs Marital Status ')
#Remove variables that won't help in our analysis
loandata <- subset(loanpredict, select = -c(Id, CITY, STATE, Profession))
#Create summary table of remaining variables
xkablesummary(loandata, title = "Summary Statistics for Loan Default Prediction")
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
library(dplyr)
library(lmtest)
library(vcd)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# use scipen=999 to prevent scientific notation at all times
#Import dataset
loanpredict <- read.csv("Training Data.csv", header = TRUE)
str(loanpredict)
#Convert necessary variables to factors/categoricals and set appropriate level titles
loanpredict$Married.Single <- recode_factor(loanpredict$Married.Single, single = "Single", married = "Married")
loanpredict$House_Ownership <- recode_factor(loanpredict$House_Ownership, rented = "Renting", owned = "Owning", norent_noown = "Neither")
loanpredict$Car_Ownership <- recode_factor(loanpredict$Car_Ownership, no = "No", yes = "Yes")
str(loanpredict)
names(loanpredict)
loandata <- subset(loanpredict, select = -c(Id, CITY, STATE, Profession))
xkablesummary(loandata, title = "Summary Statistics for Loan Default Prediction")
str(loandata)
#Summary for non-defaulted customers
xkablesummary(not_defaulted, title = "Summary of Data for Non-Defaulted Customers")
knitr::opts_chunk$set(echo = TRUE)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
loanpredict$Car_Ownership <- recode_factor(loanpredict$Car_Ownership, no = "No", yes = "Yes")
loanpredict$House_Ownership <- recode_factor(loanpredict$House_Ownership, rented = "Renting", owned = "Owning", norent_noown = "Neither")
#Import dataset
loanpredict <- read.csv("Training Data.csv", header = TRUE)
str(loanpredict)
#Convert necessary variables to factors/categoricals and set appropriate level titles
loanpredict$Married.Single <- recode_factor(loanpredict$Married.Single, single = "Single", married = "Married")
knitr::opts_chunk$set(echo = TRUE)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
library(dplyr)
library(lmtest)
library(vcd)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# use scipen=999 to prevent scientific notation at all times
#Import dataset
loanpredict <- read.csv("Training Data.csv", header = TRUE)
#Convert necessary variables to factors/categoricals and set appropriate level titles
loanpredict$Married.Single <- recode_factor(loanpredict$Married.Single, single = "Single", married = "Married")
loanpredict$House_Ownership <- recode_factor(loanpredict$House_Ownership, rented = "Renting", owned = "Owning", norent_noown = "Neither")
loanpredict$Car_Ownership <- recode_factor(loanpredict$Car_Ownership, no = "No", yes = "Yes")
#Remove variables that won't help in our analysis
loandata <- subset(loanpredict, select = -c(Id, CITY, STATE, Profession))
#Selecting only values where the customer defaulted
defaulted <- subset(loandata, Risk_Flag == 1)
#Selecting only values where the customer did not default
not_defaulted <- subset(loandata, Risk_Flag == 0)
#Import necessary library
library(corrplot)
#Subset out numerical variables for correlation analysis
numericalloan <- subset(loandata, select = c(Income, Age, Experience, CURRENT_JOB_YRS, CURRENT_HOUSE_YRS, Risk_Flag))
str(loandata)
sum(is.na(loandata$Age))
sum(is.na(loandata$Income))
sum(is.na(loandata$Experience))
sum(is.na(loandata$Married.Single))
sum(is.na(loandata$House_Ownership))
sum(is.na(loandata$Car_Ownership))
sum(is.na(loandata$CURRENT_HOUSE_YRS))
sum(is.na(loandata$CURRENT_JOB_YRS))
sum(is.na(loandata$Income))
#outlierKD2(defaulted, Age, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
#outlierKD2(defaulted, Income, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
#outlierKD2(defaulted, Experience, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
#outlierKD2(defaulted, CURRENT_JOB_YRS, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
#outlierKD2(not_defaulted, Age, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
#outlierKD2(not_defaulted, Income, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
#outlierKD2(not_defaulted, Experience, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
#outlierKD2(not_defaulted, CURRENT_JOB_YRS, rm=TRUE, boxplt=FALSE, histogram=FALSE, qqplt=FALSE)
#Create summary table of remaining variables
xkablesummary(loandata, title = "Summary Statistics for Loan Default Prediction")
knitr::opts_chunk$set(echo = TRUE)
h_manual <- roc(Risk_Flag ~ house_job_exp_age_limit_marital_income_car, data = loandata)
auc(h_manual)
plot(h_manual)
library(caTools)
loadPkg('pROC')
library('pROC')
h_manual <- roc(Risk_Flag ~ house_job_exp_age_limit_marital_income_car, data = loandata)
knitr::opts_chunk$set(echo = TRUE)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
library(dplyr)
library(lmtest)
library(vcd)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# use scipen=999 to prevent scientific notation at all times
#Import dataset
loanpredict <- read.csv("Training Data.csv", header = TRUE)
str(loanpredict)
#Convert necessary variables to factors/categoricals and set appropriate level titles
loanpredict$Married.Single <- recode_factor(loanpredict$Married.Single, single = "Single", married = "Married")
loanpredict$House_Ownership <- recode_factor(loanpredict$House_Ownership, rented = "Renting", owned = "Owning", norent_noown = "Neither")
loanpredict$Car_Ownership <- recode_factor(loanpredict$Car_Ownership, no = "No", yes = "Yes")
#Remove variables that won't help in our analysis
loandata <- subset(loanpredict, select = -c(Id, CITY, STATE, Profession))
#Create summary table of remaining variables
xkablesummary(loandata, title = "Summary Statistics for Loan Default Prediction")
#Selecting only values where the customer defaulted
defaulted <- subset(loandata, Risk_Flag == 1)
#Selecting only values where the customer did not default
not_defaulted <- subset(loandata, Risk_Flag == 0)
only_exp <- glm(Risk_Flag ~ CURRENT_JOB_YRS, data = loandata, family = 'binomial')
summary(only_exp)
overall_exp <- glm(Risk_Flag ~ Experience, data = loandata, family = 'binomial')
summary(overall_exp)
house_job_exp <- glm(Risk_Flag ~ Experience + House_Ownership, data = loandata, family = 'binomial')
summary(house_job_exp)
house_job_exp_inter <- glm(Risk_Flag ~ Experience + House_Ownership + Experience:House_Ownership, data = loandata, family = 'binomial')
summary(house_job_exp_inter)
house_job_exp_house <- glm(Risk_Flag ~ Experience + House_Ownership + CURRENT_HOUSE_YRS, data = loandata, family = 'binomial')
summary(house_job_exp_house)
house_job_exp_age <- glm(Risk_Flag ~ Experience + House_Ownership + Age, data = loandata, family = 'binomial')
summary(house_job_exp_age)
library(car)
vif(house_job_exp_age)
house_job_exp_age_inter <- glm(Risk_Flag ~ Experience + House_Ownership + Age + Experience:House_Ownership + Experience:Age + House_Ownership:Age, data = loandata, family = 'binomial')
summary(house_job_exp_age_inter)
house_job_exp_age_limit_inter <- glm(Risk_Flag ~ Experience + House_Ownership + Age +  Experience:Age + House_Ownership:Age, data = loandata, family = 'binomial')
summary(house_job_exp_age_limit_inter)
house_job_exp_age_limit_marital <- glm(Risk_Flag ~ Experience + House_Ownership + Age + Married.Single + Experience:Age + House_Ownership:Age, data = loandata, family = 'binomial')
summary(house_job_exp_age_limit_marital)
house_job_exp_age_limit_marital_inter <- glm(Risk_Flag ~ Experience + House_Ownership + Age + Married.Single + Experience:Age + House_Ownership:Age + Experience:Married.Single + House_Ownership:Married.Single + Age:Married.Single, data = loandata, family = 'binomial')
summary(house_job_exp_age_limit_marital_inter)
house_job_exp_age_limit_marital_income <- glm(Risk_Flag ~ Experience + House_Ownership + Age + Married.Single + Income + Experience:Age + House_Ownership:Age + House_Ownership:Married.Single, data = loandata, family = 'binomial')
summary(house_job_exp_age_limit_marital_income)
house_job_exp_age_limit_marital_income_car <- glm(Risk_Flag ~ Experience + House_Ownership + Age + Married.Single + Income + Car_Ownership + Experience:Age + House_Ownership:Age + House_Ownership:Married.Single, data = loandata, family = 'binomial')
summary(house_job_exp_age_limit_marital_income_car)
h_manual <- roc(Risk_Flag ~ house_job_exp_age_limit_marital_income_car, data = loandata)
h_manual <- roc(Risk_Flag ~ house_job_exp_age_limit_marital_income_car, data = loandata)
variable_list <- list(loandata$Experience, loandata$House_Ownership, loandata$Age, loandata$Married.Single, loandata$Income, loandata$Car_Ownership, loandata$Experience*loandata$Age, loandata$House_Ownership*loandata$Age, loandata$House_Ownership*loandata$Married.Single)
ownership_age = loandata$House_Ownership*loandata$Age
library(caTools)
loandata$Risk_Flag <- as.factor(loandata$Risk_Flag)
split <- sample.split(loandata, SplitRatio = 0.75)
# split
train_reg <- subset(loandata, split == "TRUE")
test_reg <- subset(loandata, split == "FALSE")
# Specify a null model with no predictors
null_model <- glm(Risk_Flag ~ 1, data = train_reg, family = "binomial")
# Specify the full model using all of the potential predictors
full_model <- glm(Risk_Flag ~ ., data = train_reg, family = "binomial")
# Use a backward stepwise algorithm on AIC to build a parsimonious model
bkwrd_AIC_model_vars <- step(full_model, scope = list(lower = null_model, upper = full_model), direction = "backward", k=2)
# Use a backward stepwise algorithm on BIC to build a parsimonious model
bkwrd_BIC_model_vars <- step(full_model, scope = list(lower = null_model, upper = full_model), direction = "backward", k=log(nrow(train_reg)))
prob_predictbic <- predict(bkwd_bic_model, test_reg, type='response')
bkwd_bic_model <- glm(Risk_Flag ~ CURRENT_JOB_YRS+Age+Married.Single+Car_Ownership+House_Ownership+Experience, data = train_reg, family = "binomial")
summary(bkwd_bic_model)
prob_predictbic <- predict(bkwd_bic_model, test_reg, type='response')
test_reg$prob_bic <- ifelse(prob_predictbic > 0.15,1,0)
ifelse(prob_predictbic > 0.15,1,0)
h <- roc(Risk_Flag ~ prob_bic, data = test_reg)
auc(h)
plot(h)
prob_predict_manual <- predict(house_job_exp_age_limit_marital_income_car, loandata, type='response')
test_reg$prob_manual <- ifelse(prob_predict_manual > 0.15,1,0)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.15,1,0)
h_manual <- roc(Risk_Flag ~ prob_manual, data = test_reg)
h_manual <- roc(Risk_Flag ~ prob_manual, data = loandata)
auc(h_manual)
plot(h_manual)
sum(loandata$prob_manual==1)
sum(loandata$prob_manual==0)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.10,1,0)
sum(loandata$prob_manual==0)
sum(loandata$prob_manual==1)
auc(h_manual)
plot(h_manual)
h_manual <- roc(Risk_Flag ~ prob_manual, data = loandata)
auc(h_manual)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.05,1,0)
h_manual <- roc(Risk_Flag ~ prob_manual, data = loandata)
auc(h_manual)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.09,1,0)
sum(loandata$prob_manual==1)
h_manual <- roc(Risk_Flag ~ prob_manual, data = loandata)
auc(h_manual)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.10,1,0)
sum(loandata$prob_manual==1)
h_manual <- roc(Risk_Flag ~ prob_manual, data = loandata)
auc(h_manual)
sum(loandata$prob_manual==1)
sum(loandata$prob_manual==0)
sum(loandata$Risk_Flag==0)
sum(loandata$Risk_Flag==1)
sum(loandata$prob_manual==1)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.20,1,0)
sum(loandata$prob_manual==1)
sum(loandata$Risk_Flag==1)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.18,1,0)
sum(loandata$prob_manual==1)
max(prob_predict_manual)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.16,1,0)
sum(loandata$prob_manual==1)
sum(loandata$Risk_Flag==1)
h_manual <- roc(Risk_Flag ~ prob_manual, data = loandata)
auc(h_manual)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.155,1,0)
max(prob_predict_manual)
sum(loandata$prob_manual==1)
sum(loandata$Risk_Flag==1)
h_manual <- roc(Risk_Flag ~ prob_manual, data = loandata)
auc(h_manual)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.15,1,0)
max(prob_predict_manual)
sum(loandata$prob_manual==1)
sum(loandata$Risk_Flag==1)
h_manual <- roc(Risk_Flag ~ prob_manual, data = loandata)
auc(h_manual)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.14,1,0)
h_manual <- roc(Risk_Flag ~ prob_manual, data = loandata)
auc(h_manual)
sum(loandata$prob_manual==1)
sum(loandata$Risk_Flag==1)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.15,1,0)
sum(loandata$prob_manual==1)
sum(loandata$Risk_Flag==1)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.14,1,0)
sum(loandata$prob_manual==1)
loandata$prob_manual <- ifelse(prob_predict_manual > 0.145,1,0)
sum(loandata$prob_manual==1)
sum(loandata$Risk_Flag==1)
h_manual <- roc(Risk_Flag ~ prob_manual, data = loandata)
auc(h_manual)
plot(h_manual)
library(caret)
manual_cm <- confusionMatrix(as.factor(loandata$prob_manual), as.factor(loandata$Risk_Flag), mode = "everything", dnn = c("Predicted", "Actual"))
xkabledply(manual_cm$table)
xkabledply(manual_cm$table)
xkabledply(manual_cm$table)[1,2]
xkabledply(manual_cm$table)
manual_cm[2]
manual_cm[2]
manual_cm[1]
xkabledply(manual_cm$table)
manual_cm[2][2,1]
manual_cm[2][2]
manual_cm[2][1]
manual_cm$table$predicted
manual_cm$table$Predicted
manual_cm$table.Predicted
manual_cm$table[Predicted]
manual_cm$byClass
manual_cm$byClass[1]
manual_cm$byClass[1][2]
manual_cm$byClass[1]
manual_cm$Predicted
manual_cm$table[1:2]
manual_cm$table[2:2]
manual_cm$table[1:2]
manual_cm$table[4:4]
manual_cm$byClass
xkabledply(manual_cm$table)
(manual_cm$table[4:4]+manual_cm$table[1:1])/(manual_cm$table[4:4]+manual_cm$table[1:1]+manual_cm$table[2:2]+manual_cm$table[3:3])
manual_accuracy <- (manual_cm$table[4:4]+manual_cm$table[1:1])/(manual_cm$table[4:4]+manual_cm$table[1:1]+manual_cm$table[2:2]+manual_cm$table[3:3])
prob_predictbic <- predict(bkwd_bic_model, test_reg, type='response')
test_reg$prob_bic <- ifelse(prob_predictbic > 0.15,1,0)
h <- roc(Risk_Flag ~ prob_bic, data = test_reg)
auc(h)
bkwd_accuracy <- (bkwd_cm$table[4:4]+bkwd_cm$table[1:1])/(bkwd_cm$table[4:4]+bkwd_cm$table[1:1]+bkwd_cm$table[2:2]+bkwd_cm$table[3:3])
bkwd_cm <- confusionMatrix(as.factor(test_reg$prob_bic), as.factor(test_reg$Risk_Flag), mode = "everything", dnn = c("Predicted", "Actual"))
xkabledply(bkwd_cm$table)
bkwd_accuracy <- (bkwd_cm$table[4:4]+bkwd_cm$table[1:1])/(bkwd_cm$table[4:4]+bkwd_cm$table[1:1]+bkwd_cm$table[2:2]+bkwd_cm$table[3:3])
test_reg$prob_bic <- ifelse(prob_predictbic > 0.145,1,0)
h <- roc(Risk_Flag ~ prob_bic, data = test_reg)
auc(h)
# comparing the ratio
table(test_reg$prob_bic)
table(test_reg$Risk_Flag)
prob_predictaic <- predict(full_model, test_reg, type='response')
test_reg$prob_aic <- ifelse(prob_predictaic > 0.15,1,0)
fwd_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(fwd_h)
plot(fwd_h)
# comparing the ratio
table(test_reg$prob_aic)
table(test_reg$Risk_Flag)
auc(fwd_h)
test_reg$prob_aic <- ifelse(prob_predictaic > 0.145,1,0)
auc(fwd_h)
test_reg$prob_aic <- ifelse(prob_predictaic > 0.16,1,0)
fwd_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(fwd_h)
test_reg$prob_aic <- ifelse(prob_predictaic > 0.145,1,0)
fwd_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(fwd_h)
test_reg$prob_aic <- ifelse(prob_predictaic > 0.14,1,0)
fwd_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(fwd_h)
test_reg$prob_aic <- ifelse(prob_predictaic > 0.135,1,0)
fwd_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(fwd_h)
test_reg$prob_aic <- ifelse(prob_predictaic > 0.13,1,0)
fwd_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(fwd_h)
test_reg$prob_aic <- ifelse(prob_predictaic > 0.12,1,0)
fwd_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(fwd_h)
test_reg$prob_aic <- ifelse(prob_predictaic > 0.11,1,0)
fwd_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(fwd_h)
test_reg$prob_aic <- ifelse(prob_predictaic > 0.115,1,0)
fwd_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(fwd_h)
library(rpart)
library(rpart.plot)
dt <- rpart(Risk_Flag ~ ., data = train_reg, method= "class")
# predicting in test set
predict_dt_test <- predict(dt, test_reg, type = 'class')
#confusion matrix
cmdt <- table(test_reg$Risk_Flag, predict_dt_test)
xkabledply( cmdt, title = "Confusion matrix from Decision Tree" )
# Accuracy
acc_dt <-  sum(diag(cmdt)) / sum(cmdt)
print(paste('Decision Tree Accuracy =', acc_dt))
# plot(dt)
# predicting in test set
predict_dt_test <- predict(dt, test_reg, type = 'class')
pdata <- as.data.frame(predict(dt, test_reg, type = "p"))
head(pdata)
# confusion matrix
table(test_reg$Y, pdata$`1` > .5)
# confusion matrix
table(test_reg$y, pdata$`1` > .5)
head(pdata)
pdata$my_custom_predicted_class <- ifelse(pdata$`1` > .5, 1, 0)
# plot(dt)
str(test_reg)
# confusion matrix
table(test_reg$Risk_Flag, pdata$`1` > .5)
confusionMatrix(data = pdata$my_custom_predicted_class,
reference = test_reg$Risk_Flag, positive = "1")
pdata$my_custom_predicted_class <- ifelse(pdata$`1` > .5, 1, 0)
confusionMatrix(data = pdata$my_custom_predicted_class,
reference = test_reg$Risk_Flag, positive = "1")
# confusion matrix
table(test_reg$Risk_Flag, pdata$`1` > .12)
# confusion matrix
table(test_reg$Risk_Flag, pdata$`1` > .15)
pdata$my_custom_predicted_class <- ifelse(pdata$`1` > .5, 1, 0)
head(pdata$my_custom_predicted_class)
confusionMatrix(data = pdata$my_custom_predicted_class,
test_reg$Risk_Flag, positive = "1")
# confusion matrix
table(test_reg$Risk_Flag, pdata$`1` > .2)
# confusion matrix
table(test_reg$Risk_Flag, pdata$`1` > .12)
dt <- rpart(Risk_Flag ~ ., data = train_reg, method= "class", cutoff = c(0.85, 0.15))
dt <- rpart(Risk_Flag ~ ., data = train_reg, method= "class", prior = c(0.85, 0.15))
dt <- rpart(Risk_Flag ~ ., data = train_reg, method= "class", parms = list(cutoff = c(0.85, 0.15)))
dt <- rpart(Risk_Flag ~ ., data = train_reg, method= "class", parms = list(prior = c(0.85, 0.15)))
# predicting in test set
predict_dt_test <- predict(dt, test_reg, type = 'class')
#confusion matrix
cmdt <- table(test_reg$Risk_Flag, predict_dt_test)
xkabledply( cmdt, title = "Confusion matrix from Decision Tree" )
xkabledply( cmdt, title = "Confusion matrix from Decision Tree" )
cmdt
dt <- rpart(Risk_Flag ~ ., data = train_reg, method= "class", parms = list(prior = c(0.89, 0.11)))
# predicting in test set
predict_dt_test <- predict(dt, test_reg, type = 'class')
#confusion matrix
cmdt <- table(test_reg$Risk_Flag, predict_dt_test)
cmdt
dt <- rpart(Risk_Flag ~ ., data = train_reg, method= "class", parms = list(prior = c(0.999, 0.001)))
# predicting in test set
predict_dt_test <- predict(dt, test_reg, type = 'class')
#confusion matrix
cmdt <- table(test_reg$Risk_Flag, predict_dt_test)
cmdt
dt <- rpart(Risk_Flag ~ ., data = train_reg, method= "class")
# predicting in test set
predict_dt_test <- predict(dt, test_reg, type = 'class')
#confusion matrix
cmdt <- table(test_reg$Risk_Flag, predict_dt_test)
xkabledply( cmdt, title = "Confusion matrix from Decision Tree" )
accuracy_tune <- function(fit) {
predict_unseen <- predict(fit, test_reg, type = 'class')
table_mat <- table(test_reg$Risk_Flag, predict_unseen)
accuracy_Test <- sum(diag(table_mat)) / sum(table_mat)
accuracy_Test
}
control <- rpart.control(minsplit = 3,
minbucket = round(4 / 3),
maxdepth = 30,
cp = 0)
tune_fit <- rpart(Risk_Flag~., data = train_reg, method = 'class', control = control)
accuracy_tune(tune_fit)
#confusion matrix
predict_dt_test_tune <- predict(tune_fit, test_reg, type = 'class')
cmdtt <- table(test_reg$Risk_Flag, predict_dt_test_tune)
xkabledply( cmdtt, title = "Confusion matrix from Tuned Decision Tree" )
plot(tune_fit)
accuracy_tune(tune_fit)
auc(tune_fit)
prob_predictdt <- predict(tune_fit, test_reg, type='response')
probs <- treeresponse(tune_fit, newdata=test)
library(caret)
probs <- treeresponse(tune_fit, newdata=test)
roc_pred <- prediction(pred[,1], test_reg$Risk_Flag)
roc_pred <- predict(pred[,1], test_reg$Risk_Flag)
pred <- predict(tune_fit, newdata=test_reg)
roc_pred <- predict(pred[,1], test_reg$Risk_Flag)
roc_pred <- prediction(pred[,1], test_reg$Risk_Flag)
pred[,1]
head(pred)
head(pred[,1])
test_reg$prob_aic <- ifelse(pred[,1] > 0.85,0,1)
fwd_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(fwd_h)
test_reg$prob_dt <- ifelse(pred[,1] > 0.855,0,1)
dt_h <- roc(Risk_Flag ~ prob_aic, data = test_reg)
auc(dt_h)
plot(dt_h)
#install.packages("randomForest")
library(randomForest)
rf <- randomForest(Risk_Flag ~ ., data = train_reg, ntree = 100)
rf <- randomForest(Risk_Flag ~ ., data = train_reg, ntree = 100)
# predicting in test set
predict_test <- predict(rf, test_reg, type = 'response')
#confusion matrix
cm <- table(test_reg$Risk_Flag, predict_test)
xkabledply( cm, title = "Confusion matrix from Random Forest" )
# Accuracy
missing_classerr <- mean(predict_test != test_reg$Risk_Flag)
print(paste('Random Forest Accuracy =', 1 - missing_classerr))
plot(rf)
head(predict_test)
max(predict_test)
str(predict_test)
auc(predict_test)
test_reg$prob_rf <- ifelse(predict_test == 1,1,0)
rf_h <- roc(Risk_Flag ~ prob_rf, data = test_reg)
auc(rf_h)
plot(rf_h)
print(paste('Random Forest Accuracy =', 1 - missing_classerr))
plot(rf)
